//PACE 3: Alexa Lounsbury, Krysta Parker, Jenny Barbieri, Chigozie Nzeadighibe    
//4-10-22
//Battleship Assignment

//o-dimensional array as the basis for creating a one-player game of battleship.
//(The computer generates the board and places the ships, and then the player has to guess the ship positions.)
//In the game a '~' character represents ocean, a '#' character represents a part of a ship, 
//an 'H' character represents a place where a part of a ship has been hit, and a  '.' character represents a  miss.

#include <iostream>

using namespace std;

int boardRow;
int boardcCol;
char board[boardRow][boardCol];
int ships[]; //Array of ships

const char water = '~';
const char shipFloat = '#';
const char shipSunk = 'H';
const char miss = '.';

enum ocean {'~', '#', 'H', '.'} //characters used to represent whats in the ocean
enum shipType{carrier, battleship, cruiser, submarine, destroyer}; //type os ship

struct ship
{
  shipType type; //type of ship
  int size; //size of ship
  bool sunk; // ship sunk=true or false
  int location[][];
}

//pre:
//post: generates board and ship locations
void GenBoard();


//pre: ship locations and board are generated.
//post: determines if hit is a ship or a miss
bool ShipGuess();

//pre:
//post: shows current condition of the board
void BoardDisplay();

int main()
{
  //createBoard();
  //setupBoard();
  //playGame();
}

void GenBoard()
{
  //ask user for shiptype
  //ask position of ship on board(x,y)
  //ask orientation of ship on board(verical, horizontal)
}

void attack()
{
  //ask guess coordinate(x,y)
  //evaluate if it was a hit or miss and update accordingly
  //update board
}

void playGame()
{
  //check player's turn
  //call attack function
  //call checkWinner function
}

void checkWinner()
{
  //loop ships
  //check sunk status to determine winner
}

