//PACE 3: Alexa Lounsbury, Krysta Parker, Jenny Barbieri, Chigozie Nzeadighibe    
//4-10-22
//Battleship Assignment

//o-dimensional array as the basis for creating a one-player game of battleship.
//(The computer generates the board and places the ships, and then the player has to guess the ship positions.)
//In the game a '~' character represents ocean, a '#' character represents a part of a ship, 
//an 'H' character represents a place where a part of a ship has been hit, and a  '.' character represents a  miss.

#include <iostream>
#include <ctime>
#include <string>

using namespace std;

int boardRow;
int boardcCol;
char board[10][10];
int ships[]; //Array of ships

const char water = '~';
const char shipFloat = '#';
const char shipSunk = 'H';
const char miss = '.';

enum shipType{carrier, battleship, cruiser, submarine, destroyer}; //type os ship

struct ship
{
  shipType type; //type of ship
  int size; //size of ship
  bool sunk; // ship sunk=true or false
  int location[][];
}

//pre:
//post: generates board and ship locations
void GenBoard();

//pre: ship locations and board are generated.
//post: determines if hit is a ship or a miss
bool ShipGuess();

//pre:
//post: shows current condition of the board
void BoardDisplay();

//pre:check status of ships
//post:determine winner
void checkWinner();

//pre:
//post: player choose coorinates to fire
void attack(int x, int y);


int main()
{
   int x, y;
   srand((unsigned int)time(NULL));
   GenBoard();     //creates board

   do {
       do {
           cout << "Enter a number 1-10 to select a column:";
           cin >> x;
       } while (!(x > 0 && x <= 10));
       do {
           cout << "Enter a number 1-10 to select a row:";
           cin >> y;
       } while (!(y > 0 && y <= 10));
       attack(x - 1, y - 1);
       BoardDisplay();  //display board after turn

   } while (!checkWinner()); //check if all ships are hit
   
   cout << "All the ships have been destroyed!" << endl;  //when all ships have been hit print message
   return 0;
}

void GenBoard()
{
  //ask user for shiptype
  //ask position of ship on board(x,y)
  //ask orientation of ship on board(verical, horizontal)
}

void attack()
{
  //ask guess coordinate(x,y)
  //evaluate if it was a hit or miss and update accordingly
  //update board
}


void checkWinner()
{
  //loop ships
  //check sunk status to determine winner
}
